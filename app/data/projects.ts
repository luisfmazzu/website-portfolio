import { useTranslation } from "@/hooks/use-translation"

export interface ProjectFile {
    name: string
    url: string
    size?: string
}
  
export interface Project {
  id: number
  title: string
  description: string
  image: string
  technologies: string[]
  details: string[]
  githubUrl?: string
  websiteUrl?: string
  files?: ProjectFile[]
  // New fields for company credit
  company?: {
      name: string
      logo?: string
      website?: string
  }
  role?: string
  contribution?: string[]
}
  
// Create a function to generate projects with translations
export function getProjects() {
  const { t } = useTranslation()
  
  const projects: Project[] = [
    {
      id: 1,
      title: t("projects.project1.title"),
      description: t("projects.project1.description"),
      image: "/elixir.jpg_large?height=400&width=600",
      technologies: ["Python", "Web3", "TypeScript", "Serverless", "JavaScript", "React", "Kafka", "AWS", "Flask", "FastAPI", "Redis", "PostgreSQL", "Next.js", "Node.js", "MongoDB", "Docker", "Grafana", "API Integration", ],
      details: [
          t("projects.project1.detail1"),
          t("projects.project1.detail2"),
          t("projects.project1.detail3"),
          t("projects.project1.detail4"),
          t("projects.project1.detail5"),
          t("projects.project1.detail6")
      ],
      githubUrl: "",
      websiteUrl: "https://elixir.xyz",
      files: [],
      company: {
          name: t("projects.project1.company"),
          logo: "/elixir_logo.jpg?height=40&width=40",
          website: "https://elixir.xyz",
      },
      role: t("projects.project1.role"),
      contribution: [],
    },
    {
      id: 2,
      title: t("projects.project2.title"),
      description: t("projects.project2.description"),
      image: "/vintality.png?height=400&width=600",
      technologies: ["TypeScript", "React Native", "Serverless", "Node.js", "Nest.js", "API Integration", "Redis", "PostgreSQL", "MongoDB", "AWS", "MQTT", "Docker", "Grafana",],
      details: [
        t("projects.project2.detail1"),
        t("projects.project2.detail2"),
        t("projects.project2.detail3"),
        t("projects.project2.detail4"),
        t("projects.project2.detail5"),
        t("projects.project2.detail6"),
      ],
      githubUrl: "",
      websiteUrl: "https://vintality.com/",
      files: [],
      company: {
        name: t("projects.project2.company"),
        logo: "/vintality_logo.jpg?height=40&width=40",
        website: "https://vintality.com/",
      },
      role: t("projects.project2.role"),
      contribution: [],
    },
    {
      id: 3,
      title: t("projects.project3.title"),
      description: t("projects.project3.description"),
      image: "/portfolio_website.jpg?height=400&width=600",
      technologies: ["React", "Next.js", "TypeScript", "AWS"],
      details: [
        t("projects.project3.detail1"),
        t("projects.project3.detail2"),
        t("projects.project3.detail3"),
        t("projects.project3.detail4"),
        t("projects.project3.detail5"),
        t("projects.project3.detail6"),
        t("projects.project3.detail7"),
        t("projects.project3.detail8")
      ],
      githubUrl: "",
      websiteUrl: "https://luisfmazzu.com",
      files: [],
      role: t("projects.project3.role")
      // No company - personal project
    },
    {
      id: 4,
      title: t("projects.project4.title"),
      description: t("projects.project4.description"),
      image: "/decentralized_storage.jpg?height=400&width=600",
      technologies: ["React", "TypeScript", "Next.js", "Web3", "Golang", "Gin", "Solidity", "IPFS", "Docker", "Grafana",],
      details: [
        t("projects.project4.detail1"),
        t("projects.project4.detail2"),
        t("projects.project4.detail3"),
        t("projects.project4.detail4"),
        t("projects.project4.detail5"),
      ],
      githubUrl: "",
      websiteUrl: "",
      files: [],
      role: t("projects.project4.role"),
      contribution: []
    },
    {
      id: 5,
      title: t("projects.project5.title"),
      description: t("projects.project5.description"),
      image: "/agronave.webp?height=400&width=600",
      technologies: ["C", "C++", "QT", "Rust", "MongoDB",],
      details: [
        t("projects.project5.detail1"),
        t("projects.project5.detail2"),
        t("projects.project5.detail3"),
      ],
      githubUrl: "",
      websiteUrl: "https://en.agres.com.br/",
      files: [],
      company: {
        name: t("projects.project5.company"),
        logo: "/agres_logo.png?height=40&width=40",
        website: "https://en.agres.com.br/",
      },
      role: t("projects.project5.role"),
      contribution: [],
    },
    {
      id: 6,
      title: t("projects.project6.title"),
      description: t("projects.project6.description"),
      image: "/AI-Web-Scraping.svg?height=400&width=600",
      technologies: ["Selenium", "Python", "Flask", "Serverless", "TypeScript", "React", "Next.js", "Redis", "PostgreSQL", "AI", "AWS", "OpenAI", "Docker", "Grafana", "API Integration"],
      details: [
        t("projects.project6.detail1"),
        t("projects.project6.detail2"),
        t("projects.project6.detail3"),
        t("projects.project6.detail4"),
        t("projects.project6.detail5"),
        t("projects.project6.detail6"),
      ],
      websiteUrl: "",
      files: [],
      role: t("projects.project6.role"),
      contribution: [],
    },
    {
      id: 7,
      title: t("projects.project7.title"),
      description: t("projects.project7.description"),
      image: "/ocarina_ai.jpg?height=400&width=600",
      technologies: ["Selenium", "Python", "Django", "TypeScript", "React", "Next.js", "AWS", "PostgreSQL", "TensorFlow", "AI", "API Integration"],
      details: [
        t("projects.project7.detail1"),
        t("projects.project7.detail2"),
        t("projects.project7.detail3"),
        t("projects.project7.detail4"),
        t("projects.project7.detail5"),
        t("projects.project7.detail6"),
      ],
      websiteUrl: "https://ocarinastudios.com",
      files: [],
      company: {
        name: t("projects.project7.company"),
        logo: "/ocarina_logo.jpg?height=40&width=40",
        website: "https://ocarinastudios.com",
      },
      role: t("projects.project7.role"),
      contribution: [],
    },
    {
      id: 8,
      title: t("projects.project8.title"),
      description: t("projects.project8.description"),
      image: "/ocarina_google.jpg?height=400&width=600",
      technologies: ["C#", "Unity", "Google Tools"],
      details: [
        t("projects.project8.detail1"),
        t("projects.project8.detail2"),
        t("projects.project8.detail3"),
        t("projects.project8.detail4"),
        t("projects.project8.detail5"),
        t("projects.project8.detail6"),
      ],
      websiteUrl: "https://ocarinastudios.com",
      files: [],
      company: {
        name: t("projects.project8.company"),
        logo: "/ocarina_logo.jpg?height=40&width=40",
        website: "https://ocarinastudios.com",
      },
      role: t("projects.project8.role"),
      contribution: [],
    },
    {
      id: 9,
      title: t("projects.project9.title"),
      description: t("projects.project9.description"),
      image: "/ocarina_1.jpg?height=400&width=600",
      technologies: ["C#", ".NET", "MongoDB", "Serverless", "API Integration", "AWS", "Redis", "Docker", "Grafana"],
      details: [
        t("projects.project9.detail1"),
        t("projects.project9.detail2"),
        t("projects.project9.detail3"),
        t("projects.project9.detail4"),
        t("projects.project9.detail5"),
        t("projects.project9.detail6"),
      ],
      websiteUrl: "https://play.google.com/store/apps/details?id=com.ocarina.dreamquiz",
      files: [],
      company: {
        name: t("projects.project9.company"),
        logo: "/ocarina_logo.jpg?height=40&width=40",
        website: "https://ocarinastudios.com",
      },
      role: t("projects.project9.role"),
      contribution: [],
    },
    {
      id: 10,
      title: t("projects.project10.title"),
      description: t("projects.project10.description"),
      image: "/ocarina_2.webp?height=400&width=600",
      technologies: ["Golang", "Gin", "DynamoDB", "API Integration", "AWS", "Redis", "Docker", "Grafana"],
      details: [
        t("projects.project10.detail1"),
        t("projects.project10.detail2"),
        t("projects.project10.detail3"),
        t("projects.project10.detail4"),
        t("projects.project10.detail5"),
        t("projects.project10.detail6"),
      ],
      websiteUrl: "https://play.google.com/store/apps/details?id=com.ocarina.triviabattle",
      files: [],
      company: {
        name: t("projects.project10.company"),
        logo: "/ocarina_logo.jpg?height=40&width=40",
        website: "https://ocarinastudios.com",
      },
      role: t("projects.project10.role"),
      contribution: [],
    },
    {
      id: 11,
      title: t("projects.project11.title"),
      description: t("projects.project11.description"),
      image: "/ocarina_3.jpg?height=400&width=600",
      technologies: ["Python", "Flask", "Swift", "MongoDB", "AWS", "Redis", "Grafana", "AWS"],
      details: [
        t("projects.project11.detail1"),
        t("projects.project11.detail2"),
        t("projects.project11.detail3"),
        t("projects.project11.detail4"),
        t("projects.project11.detail5"),
        t("projects.project11.detail6"),
      ],
      websiteUrl: "",
      files: [],
      company: {
        name: t("projects.project11.company"),
        logo: "/ocarina_logo.jpg?height=40&width=40",
        website: "https://ocarinastudios.com",
      },
      role: t("projects.project11.role"),
      contribution: [],
    },
    {
      id: 12,
      title: t("projects.project12.title"),
      description: t("projects.project12.description"),
      image: "/intel_sgx.jpg?height=400&width=600",
      technologies: ["C", "Intel SGX", "Security"],
      details: [
        t("projects.project12.detail1"),
        t("projects.project12.detail2"),
        t("projects.project12.detail3"),
        t("projects.project12.detail4"),
        t("projects.project12.detail5"),
      ],
      websiteUrl: "",
      files: [],
      company: {
        name: t("projects.project12.company"),
        logo: "/utfpr.png?height=40&width=40",
        website: "https://www.utfpr.edu.br/",
      },
      role: t("projects.project12.role"),
      contribution: [],
    },
    {
      id: 13,
      title: t("projects.project13.title"),
      description: t("projects.project13.description"),
      image: "/sgx_2.jpg?height=400&width=600",
      technologies: ["C", "Rust", "Python", "Intel SGX", "Security"],
      details: [
        t("projects.project13.detail1"),
        t("projects.project13.detail2"),
        t("projects.project13.detail3"),
        t("projects.project13.detail4"),
        t("projects.project13.detail5"),
        t("projects.project13.detail6"),
      ],
      websiteUrl: "",
      files: [],
      company: {
        name: t("projects.project13.company"),
        logo: "/utfpr.png?height=40&width=40",
        website: "https://www.utfpr.edu.br/",
      },
      role: t("projects.project13.role"),
      contribution: [],
    },
    {
      id: 14,
      title: t("projects.project14.title"),
      description: t("projects.project14.description"),
      image: "/pokemon.jpg?height=400&width=600",
      technologies: ["C#", "Unity"],
      details: [
        t("projects.project14.detail1"),
        t("projects.project14.detail2"),
        t("projects.project14.detail3"),
        t("projects.project14.detail4"),
        t("projects.project14.detail5"),
        t("projects.project14.detail6"),
      ],
      websiteUrl: "",
      files: [],
      role: t("projects.project14.role"),
      contribution: [],
    },
    {
      id: 15,
      title: t("projects.project15.title"),
      description: t("projects.project15.description"),
      image: "/midi.webp?height=400&width=600",
      technologies: ["C", "Java"],
      details: [
        t("projects.project15.detail1"),
        t("projects.project15.detail2"),
        t("projects.project15.detail3"),
        t("projects.project15.detail4"),
        t("projects.project15.detail5"),
      ],
      websiteUrl: "",
      files: [],
      role: t("projects.project15.role"),
      contribution: [],
    },
    {
      id: 16,
      title: t("projects.project16.title"),
      description: t("projects.project16.description"),
      image: "/nft_marketplace.png?height=400&width=600",
      technologies: ["TypeScript", "Web3", "Solidity", "Node.js", "Nest.js", "React", "IPFS", "Next.js", "API Integration"],
      details: [
        t("projects.project16.detail1"),
        t("projects.project16.detail2"),
        t("projects.project16.detail3"),
        t("projects.project16.detail4"),
        t("projects.project16.detail5"),
        t("projects.project16.detail6"),
      ],
      websiteUrl: "",
      files: [],
      role: t("projects.project16.role"),
      contribution: [],
    },
  ]

  return projects
}

// For backward compatibility - LEGACY CODE
// This array isn't used in the current implementation but kept for backward compatibility
// The getProjects() function should be used instead as it provides proper translations
export const projects: Project[] = [
  // Default placeholder values in English
  {
      id: 1,
      title: "Elixir Protocol",
      description: "A full-featured decentralized market-making platform in the blockchain.",
      image: "/elixir.jpg_large?height=400&width=600",
      technologies: ["Python", "Web3", "TypeScript", "Serverless", "JavaScript", "React", "Kafka", "AWS", "Flask", "FastAPI", "Redis", "PostgreSQL", "Next.js", "Node.js", "MongoDB", "Docker", "Grafana", "API Integration", ],
      details: [
          "Designed and built an innovative decentralized application for liquidity provisioning on the blockchain, enhancing market accessibility and efficiency. The project reached a trading volume in the billions of dollars and a Total Value Locked (TVL) exceeding 50 million dollars on May 2024.",
          "Engineered a robust off-chain network incorporating a consensus layer, validator nodes, auditing mechanisms, and advanced market-making strategies. Designed systems capable of supporting over 100,000 validators.",
          "Utilized Python, WebSockets, Kafka, Web3, and AWS to implement core network components, ensuring seamless communication and processing in many blockchain networks (Ethereum, Sui, Arbitrum, Solana).",
          "Developed the front end and managed integration with blockchain and off-chain services using TypeScript, JavaScript, React, and NextJS, delivering a cohesive user experience.",
          "Actively contributed to system architecture design, prioritizing security and resilience against off-chain attack vectors to ensure robust performance.",
          "Developed high-performance algorithms to maintain the system's Service Level Agreement (SLA) expectations."
      ],
      githubUrl: "",
      websiteUrl: "https://elixir.xyz",
      files: [],
      company: {
          name: "Elixir Technologies Ltd.",
          logo: "/elixir_logo.jpg?height=40&width=40",
          website: "https://elixir.xyz",
      },
      role: "Senior Full-Stack Engineer",
      contribution: [],
  },
  {
      id: 2,
      title: "Vintality",
      description: "An irrigation mobile app, which provided data for user sensor hardware, current/forecast weather data and a proprietary algorithm",
      image: "/vintality.png?height=400&width=600",
      technologies: ["TypeScript", "React Native", "Serverless", "Node.js", "Nest.js", "API Integration", "Redis", "PostgreSQL", "MongoDB", "AWS", "MQTT", "Docker", "Grafana",],
      details: [
        "Led backend development for an irrigation app using NodeJS, NestJS, and AWS, creating scalable services for user management, messaging, and API integrations.",
        "Implemented RabbitMQ for efficient data processing and real-time communication between services.",
        "Ensured seamless data flow between hardware, backend, and the mobile frontend.",
        "Contributed to the React Native mobile app frontend, enhancing user experience with intuitive data visualization and real-time updates.",
        "Collaborated with the design team to ensure UI consistency and performance.",
        "Deployed and managed cloud infrastructure on AWS, optimizing cost and scalability for backend services and databases.",
        "Integrated monitoring and logging to maintain system reliability and quick issue resolution.",
        "Established secure API connections for third-party weather data and hardware sensor integrations, ensuring data accuracy and uptime.",
        "Implemented authentication and rate-limiting to protect backend services from abuse.",
        "Coordinated cross-functional teamwork between hardware engineers, data scientists, and mobile developers to align features with user needs.",
        "Facilitated agile workflows to deliver updates efficiently and meet project milestones.",
        "Designed and maintained the app's data analysis pipeline, leveraging weather forecasts and sensor data to optimize irrigation schedules via a proprietary algorithm.",
      ],
      githubUrl: "",
      websiteUrl: "https://vintality.com/",
      files: [],
      company: {
        name: "Vintality Tech Inc.",
        logo: "/vintality_logo.jpg?height=40&width=40",
        website: "https://vintality.com/",
      },
      role: "Lead Full Stack Developer",
      contribution: [],
  },
  {
    id: 3,
    title: "Portfolio Website",
    description: "Personal portfolio website showcasing projects and skills. The one you are seeing right now!",
    image: "/portfolio_website.jpg?height=400&width=600",
    technologies: ["React", "Next.js", "TypeScript", "AWS"],
    details: [
      "Designed and developed this personal portfolio website using TypeScript, Next.js, TypeScript, Tailwind CSS, and AWS.",
      "Implemented responsive design for all device sizes",
      "Created smooth animations and transitions",
      "Built a contact form with email integration",
      "Built a contribution graph for git data with GitHub and GitLab integration",
      "Optimized performance with Next.js static generation",
      "Implemented dark mode with theme persistence",
      "Implemented translation system"
    ],
    githubUrl: "",
    websiteUrl: "https://luisfmazzu.com",
    files: [],
    role: "Full-Stack Engineer"
    // No company - personal project
  },
  {
    id: 4,
    title: "Nebula Storage",
    description: "A decentralized storage and content distribution network (CDN) built on top of Ethereum and IPFS (InterPlanetary File System).",
    image: "/decentralized_storage.jpg?height=400&width=600",
    technologies: ["React", "TypeScript", "Next.js", "Web3", "Golang", "Gin", "Solidity", "IPFS", "Docker", "Grafana",],
    details: [
      "Developed a distributed file storage solution using Golang, Gin, IPFS, and Solidity (Ethereum smart contracts), ensuring secure and tamper-proof data storage.",
      "Implemented content-defined chunking with Merkle trees and Kademlia DHT to efficiently store and retrieve files across nodes.",
      "Used Reed-Solomon encoding to reduce storage overhead by 40% while maintaining high availability and fault tolerance.",
      "Designed a retrieval mechanism using supernode caching and DHT lookups, improving file access speeds by 10x.",
      "Built a high-performance API using Gin, enabling fast file uploads, metadata management, and seamless user authentication.",
      "Developed Ethereum-based payment contracts, ensuring transparent storage fees and automated payouts to node operators.",
      "Leveraged libp2p for secure, low-latency communication between storage nodes and end users.",
      "Designed an adaptive replication strategy, maintaining 99.99% uptime even in case of node failures.",
      "Ensured data integrity through SHA-256 hashing, cryptographic proofs, and decentralized indexing.",
      "Led backend architecture and core feature development, contributing to a scalable and censorship-resistant storage platform.",
    ],
    githubUrl: "",
    websiteUrl: "",
    files: [],
    role: "Senior Full Stack Developer",
    contribution: []
  },
  {
      id: 5,
      title: "Agronave PRO",
      description: "Dashboard for tracking and analyzing social media performance metrics.",
      image: "/agronave.webp?height=400&width=600",
      technologies: ["C", "C++", "QT", "Rust", "MongoDB",],
      details: [
        "Key contributor to GeoNave, maintaining and enhancing features in C, C++, Qt, and Rust for an agriculture automation product deployed on over 1M devices.",
        "Developed the Seeding Monitor, reducing manual errors and boosting sales by 100% in one year.",
        "Ensured seamless integration with existing hardware and software components.",
        "Spearheaded Agronave Pro, an advanced embedded system with Level 3 autosteering, enhancing code reusability and security in critical components.",
        "Led project planning for Agronave Pro, conducting requirements gathering, roadmap creation, and risk assessment while prioritizing tasks for on-time delivery.",
        "Maintained full ownership of backlog management and sprint planning.",
        "Expanded the engineering team by 300%, overseeing end-to-end recruitment, interviews, and hiring decisions for software roles.",
        "Mentored interns and engineers, accelerating career growth from developer to lead and product owner in one year.",
        "Championed Agile adoption, implementing Scrum across software teams and tailoring processes to improve productivity and team satisfaction.",
        "Optimized workflows to align with project constraints while maintaining efficiency.",
      ],
      githubUrl: "",
      websiteUrl: "https://en.agres.com.br/",
      files: [],
      company: {
        name: "Agres Electronic Systems",
        logo: "/agres_logo.png?height=40&width=40",
        website: "https://en.agres.com.br/",
      },
      role: "Lead Software Engineer",
      contribution: [],
  },
  {
      id: 6,
      title: "Scrape Sense AI",
      description: "An AI-powered web scraping platform that enables users to extract and structure data from any website using customizable queries.",
      image: "/AI-Web-Scraping.svg?height=400&width=600",
      technologies: ["Selenium", "Python", "Flask", "Serverless", "TypeScript", "React", "Next.js", "Redis", "PostgreSQL", "AI", "AWS", "OpenAI", "Docker", "Grafana", "API Integration"],
      details: [
        "Developed a Python/Flask API with asynchronous task processing to handle large-scale web scraping jobs efficiently, integrating rate limiting and proxy rotation to avoid IP bans.",
        "Leveraged OpenAI's NLP models to parse and structure unstructured web data, improving accuracy by 30% compared to traditional scraping methods.",
        "Created an intuitive, responsive UI with TypeScript and Next.js, allowing users to configure scraping rules, preview results, and export data in multiple formats (CSV, JSON).",
        "Deployed the application on AWS using EC2, S3, Lambda, and RDS (PostgreSQL), ensuring high availability and scalability.",
        "Implemented secure JWT-based authentication and a dashboard where users can track active scraping jobs, download results, and manage subscriptions.",
        "Integrated a rotating proxy system and headless browser automation (Playwright/Selenium) to bypass anti-scraping measures, ensuring successful data retrieval from complex websites.",
      ],
      websiteUrl: "",
      files: [],
      role: "Full Stack Engineer",
      contribution: [],
  },
  {
    id: 7,
    title: "TriviaGen AI",
    description: "An AI-powered application that scrapes data, generates accurate trivia questions with correct answers, and creates plausible distractors.",
    image: "/ocarina_ai.jpg?height=400&width=600",
    technologies: ["Selenium", "Python", "Django", "TypeScript", "React", "Next.js", "AWS", "PostgreSQL", "TensorFlow", "AI", "API Integration"],
    details: [
      "Used Selenium to extract structured data from multiple sources while handling dynamic content and avoiding bot detection.",
      "Implemented NLP techniques with TensorFlow to analyze scraped data and generate relevant, fact-based trivia questions.",
      "Developed an algorithm to produce incorrect but contextually related answers, improving quiz difficulty and engagement.",
      "Built a scalable API with Python and Django to manage questions, user submissions, and answer validation with PostgreSQL for data storage.",
      "Integrated validation rules to ensure generated questions were coherent, accurate, and free of duplicates.",
      "Designed a simple frontend for users to customize question categories, difficulty, and export quizzes in multiple formats.",
    ],
    websiteUrl: "https://ocarinastudios.com",
    files: [],
    company: {
      name: "Ocarina Studios Inc.",
      logo: "/ocarina_logo.jpg?height=40&width=40",
      website: "https://ocarinastudios.com",
    },
    role: "Full Stack Engineer",
    contribution: [],
  },
  {
    id: 8,
    title: "Google Accelerator Program",
    description: "One of 60 studios worldwide selected for Google's accelerator, gaining expert mentorship on game analytics and business strategy.",
    image: "/ocarina_google.jpg?height=400&width=600",
    technologies: ["C#", "Unity", "Google Tools"],
    details: [
      "Attended Google-led workshops on monetization, retention, and live-ops strategies.",
      "Optimized core KPIs (DAU, retention) using mentor feedback and cohort insights.",
      "Redesigned live-ops approach, boosting player engagement metrics.",
      "Built industry connections through curated networking events.",
      "Implemented A/B testing that increased session time by 35%.",
      "Applied learnings to secure additional studio funding",
    ],
    websiteUrl: "https://ocarinastudios.com",
    files: [],
    company: {
      name: "Ocarina Studios Inc.",
      logo: "/ocarina_logo.jpg?height=40&width=40",
      website: "https://ocarinastudios.com",
    },
    role: "Software Engineering Manager",
    contribution: [],
  },
  {
    id: 9,
    title: "Dream Quiz",
    description: "A game API handling user sessions, analytics, and real-time data processing.",
    image: "/ocarina_1.jpg?height=400&width=600",
    technologies: ["C#", ".NET", "MongoDB", "Serverless", "API Integration", "AWS", "Redis", "Docker", "Grafana"],
    details: [
      "Built scalable backend with C#/.NET.",
      "Designed MongoDB schemas for optimal analytics query performance",
      "Implemented AWS Lambda for cost-effective event processing",
      "Developed session management with Redis caching",
      "Created real-time dashboards using analytics pipelines",
      "Secured API with JWT and rate limiting",
    ],
    websiteUrl: "https://play.google.com/store/apps/details?id=com.ocarina.dreamquiz",
    files: [],
    company: {
      name: "Ocarina Studios Inc.",
      logo: "/ocarina_logo.jpg?height=40&width=40",
      website: "https://ocarinastudios.com",
    },
    role: "Full Stack Engineer",
    contribution: [],
  },
  {
    id: 10,
    title: "Save Your Brain: Trivia",
    description: "A high-performance multiplayer trivia game API with matchmaking, leaderboards, and real-time gameplay.",
    image: "/ocarina_2.webp?height=400&width=600",
    technologies: ["Golang", "Gin", "DynamoDB", "API Integration", "AWS", "Redis", "Docker", "Grafana"],
    details: [
      "Engineered real-time multiplayer using WebSockets with Golang's concurrency model",
      "Built skill-based matchmaking with ELO ranking and queue optimization",
      "Designed Redis-powered leaderboards with daily/weekly/all-time rankings",
      "Created anti-cheat systems for answer validation and timing verification",
      "Implemented AWS DynamoDB for low-latency game state persistence",
      "Developed microservice architecture with Gin for high scalability",
    ],
    websiteUrl: "https://play.google.com/store/apps/details?id=com.ocarina.triviabattle",
    files: [],
    company: {
      name: "Ocarina Studios Inc.",
      logo: "/ocarina_logo.jpg?height=40&width=40",
      website: "https://ocarinastudios.com",
    },
    role: "Full Stack Engineer",
    contribution: [],
  },
  {
    id: 11,
    title: "Maver",
    description: "An iOS app that records voice input, converts it to editable MIDI, and transforms it into instrument sounds, backed by a custom audio-processing API.",
    image: "/ocarina_3.jpg?height=400&width=600",
    technologies: ["Python", "Flask", "Swift", "MongoDB", "AWS", "Redis", "Grafana", "AWS"],
    details: [
      "Built a SwiftUI-based iOS app with Core Audio integration for high-fidelity voice recording",
      "Developed a proprietary pitch-detection algorithm to convert voice recordings into MIDI notes",
      "Created an intuitive track editor with note adjustment, quantization, and tempo control",
      "Designed a cloud-based API (Python/Flask) to enhance audio processing with error correction",
      "Implemented user authentication and cloud sync to save and retrieve projects across devices",
      "Optimized the MIDI conversion to reduce artifacts and improve musical accuracy",
    ],
    websiteUrl: "",
    files: [],
    company: {
      name: "Ocarina Studios Inc.",
      logo: "/ocarina_logo.jpg?height=40&width=40",
      website: "https://ocarinastudios.com",
    },
    role: "Full Stack Engineer",
    contribution: [],
  },
  {
    id: 12,
    title: "Secure Software Auditing with Intel SGX",
    description: "A Linux kernel modification leveraging Intel SGX to securely audit and hash executed programs in untrusted environments, ensuring tamper-proof logging.",
    image: "/intel_sgx.jpg?height=400&width=600",
    technologies: ["C", "Intel SGX", "Security"],
    details: [
      "Modified the Linux kernel to intercept program executions and extract code signatures in real-time.",
      "Implemented Intel SGX enclaves to securely store and verify program hashes, shielding them from OS-level tampering.",
      "Developed a lightweight C-based auditing daemon to monitor process creation and termination events.",
      "Designed a hash-chain mechanism within SGX to detect unauthorized modifications to logged program signatures.",
      "Integrated cryptographic attestation to verify enclave integrity before accepting audit logs.",
    ],
    websiteUrl: "",
    files: [],
    company: {
      name: "Universidade Tecnológica Federal do Paraná",
      logo: "/utfpr.png?height=40&width=40",
      website: "https://www.utfpr.edu.br/",
    },
    role: "Computer Engineering Student",
    contribution: [],
  },
  {
    id: 13,
    title: "Deep Analysis of Blockchain Networks Using TEEs",
    description: "Researched and prototyped a blockchain network leveraging Intel SGX and Arm TrustZone to analyze security-performance tradeoffs in trusted execution environments.",
    image: "/sgx_2.jpg?height=400&width=600",
    technologies: ["C", "Rust", "Python", "Intel SGX", "Security"],
    details: [
      "Developed core TEE components in C using Intel SGX SDK for secure enclave operations (attestation, sealing)",
      "Built non-TEE blockchain logic in Rust, interfacing with SGX via FFI for performance-critical operations",
      "Implemented Arm TrustZone (OP-TEE) components in C for comparative analysis of TEE architectures",
      "Created Linux kernel modules (C) to monitor and audit TEE-hosted execution at runtime",
      "Designed benchmarking tools in Python to measure SGX/TrustZone overhead on consensus mechanisms",
      "Explored hybrid architectures using Graphene-SGX to run unmodified blockchain nodes in enclaves",
      "Work halted before finalizing cross-TEE synchronization for decentralized networks.",
    ],
    websiteUrl: "",
    files: [],
    company: {
      name: "Universidade Tecnológica Federal do Paraná",
      logo: "/utfpr.png?height=40&width=40",
      website: "https://www.utfpr.edu.br/",
    },
    role: "Computer Engineering Student",
    contribution: [],
  },
  {
    id: 14,
    title: "Pokémon 3D Fan Game (Undeployed Prototype)",
    description: "A 3D Pokémon fan game in Unity (C#) with core gameplay systems, shelved due to copyright concerns before asset completion.",
    image: "/pokemon.jpg?height=400&width=600",
    technologies: ["C#", "Unity"],
    details: [
      "Built modular systems for turn-based battles, NPC AI, and inventory using Unity's ECS architecture.",
      "Implemented procedural terrain generation with biome-specific wild Pokémon spawns.",
      "Created a real-time day/night cycle affecting spawn rates and in-game events.",
      "Developed save/load functionality using binary serialization for cross-session progress.",
      "Designed shader-based visual effects for battle animations (particles, screen shakes).",
      "Integrated A pathfinding* for trainer/NPC movement with dynamic obstacle avoidance.",
      "All systems were built generically (e.g., 'Monster' class instead of 'Pokémon')",
      "No Nintendo assets were used—only placeholder cubes/UI for testing",
      "Project archived after legal research on fan game precedents",
    ],
    websiteUrl: "",
    files: [],
    role: "Software Engineer",
    contribution: [],
  },
  {
    id: 15,
    title: "Bluetooth MIDI Controller",
    description: "A custom MIDI controller using Arduino, with Android app control via Bluetooth for real-time music parameter adjustments.",
    image: "/midi.webp?height=400&width=600",
    technologies: ["C", "Java"],
    details: [
      "Developed Arduino firmware (C) to read analog/digital inputs (potentiometers, buttons) and send MIDI signals via a MIDI shield.",
      "Designed a circuit with multiplexers to expand I/O capabilities, supporting 64 control knobs/buttons.",
      "Implemented Bluetooth (HC-05) communication between Arduino and Android for wireless MIDI control.",
      "Built an Android app (Java) with customizable presets, fader/knob mapping, and low-latency MIDI output.",
      "Added real-time feedback in the app (e.g., knob position sync) to ensure seamless two-way control.",
    ],
    websiteUrl: "",
    files: [],
    role: "Software Engineer",
    contribution: [],
  },
  {
    id: 16,
    title: "NFT Marketplace",
    description: "Built a decentralized NFT marketplace to explore blockchain development, featuring minting, auctions, and trading using Solidity, Node.js, and Next.js.",
    image: "/nft_marketplace.png?height=400&width=600",
    technologies: ["TypeScript", "Web3", "Solidity", "Node.js", "Nest.js", "React", "IPFS", "Next.js", "API Integration"],
    details: [
      "Developed ERC-721 & ERC-1155 smart contracts (Solidity) with secure minting, bidding, and royalty enforcement.",
      "Created a Nest.js API to interact with Ethereum (via Alchemy) for transaction processing and event listening.",
      "Designed a Next.js frontend (TypeScript/React) with wallet integration (MetaMask, WalletConnect) and real-time UI updates.",
      "Implemented IPFS for decentralized NFT metadata and asset storage.",
      "Added auction mechanics (timed bids, reserve prices) and royalty splits for secondary sales.",
      "Optimized gas costs with batch operations and contract upgrades (e.g., proxy patterns).",
    ],
    websiteUrl: "",
    files: [],
    role: "Software Engineer",
    contribution: [],
  },
]      